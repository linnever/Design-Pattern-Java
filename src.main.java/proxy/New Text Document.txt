---
layout:pattern
title:Proxy
categories:Structural 

---

**Intent:**Provide a surrogate or placeholder for another object to control access to it.
![alt text](./etc/proxy.png "Proxy")


**Applicability & Examples**
The Proxy design pattern is applicable when there is a need to control access to an Object, as well as when there is a need for a sophisticated reference to an Object. Common Situations where the proxy pattern is applicable are:
- **Virtual Proxies**ï¼š
delaying the creation and initialization of expensive objects until needed, where the objects are created on demand (For example creating the RealSubject object only when the doSomething method is invoked).
- **Remote Proxies**: providing a local representation for an object that is in a different address space. A common example is Java RMI stub objects. The stub object acts as a proxy where invoking methods on the stub would cause the stub to communicate and invoke methods on a remote object (called skeleton) found on a different machine.
- **Protection Proxies**: where a proxy controls access to RealSubject methods, by giving access to some objects while denying access to others.
- **Smart References**: providing a sophisticated access to certain objects such as tracking the number of references to an object and denying access if a certain number is reached, as well as loading an object from database into memory on demand.

**Typical Use Case:**

* control access to another object
* lazy initialization
* implement logging
* facilitate network connection
* to count references to an object

**Real world examples:**

* [java.lang.reflect.Proxy](http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html)
* [Apache Commons Proxy](https://commons.apache.org/proper/commons-proxy/)

**Credits**

* [Design Patterns: Elements of Reusable Object-Oriented Software](http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612)
* [oodesign](http://www.oodesign.com/proxy-pattern.html)
* [iluwatar](https://github.com/iluwatar/java-design-patterns/tree/master/proxy)